<class
    name = "fmq_client"
    title = "FILEMQ Client"
    script = "zproto_client_c"
    protocol_class = "fmq_msg"
    package_dir = "../include"
    source_dir = "."
    >

    This is the FILEMQ/2.0 client protocol handler
    
    <!-- As layed out by zproject, the license is in the main dir -->
    <include filename = "../license.xml" />

    <!-- State machine for a client connection -->
    
    Names of states, events, and actions are case insensitive.
    By convention however we use uppercase for protocol events.

    <state name = "start" inherit = "defaults">
        Start up the client, connect to the server, and initiate a conversation
        with the server. This is a short lived state and will either error on
        connection, e.g. bad endpoint, or it will move on to connecting.
        <event name = "constructor" next = "connecting">
            <!-- Actually connect dealer socket to the server -->
            <action name = "connect to server endpoint" />
            <!-- Tell the engine to notify if the server is not heard from -->
            <action name = "use connect timeout" />
            <!-- Initiate FileMQ conversation with the server -->
            <action name = "send" message = "OHAI" />
        </event>
        <event name = "connect error">
            The dealer socket was not successfully connected to the server. This
            could be due to a bad endpoint.
            <action name = "handle connect error" />
        </event>
    </state>

    <state name = "connecting" inherit = "defaults">
        <event name = "OHAI OK" next = "connected">
            The server is now connected and the user can be notified with a
            success message via the command pipe.
            <action name = "stayin alive" />
            <action name = "connected to server" />
        </event>
        <event name = "expired">
            If the timeout occurs during connection, terminate via the bombcmd
            event.
            <action name = "handle connect timeout" />
        </event>
    </state>

    <state name = "connected" inherit = "defaults">
        <event name = "set inbox">
            This event corresponds with the API method set inbox. This event
            will leave the client in the connected state waiting for a valid
            event.
            <action name = "setup inbox" />
        </event>
        <event name = "subscribe" next = "subscribing">
            This event corresponds with the API method subscribe. When the
            actions of this event finish the client will move to the
            subscribing state.
            <action name = "format icanhaz command" />
            <action name = "send" message = "ICANHAZ" />
        </event>
        <event name = "destructor">
            This event corresponds with the API destructor. This will tell the
            server we're leaving and then terminate.
            <action name = "send" message = "KTHXBAI" />
            <action name = "signal success">
                Success or failure is required for the destructor api.
            </action>
            <action name = "terminate" />
        </event>
        <event name = "subscribe error">
            In this state, error can be triggered from the subscribe event to
            signal bad parameter from the "subscribe" API method. This is not
            fatal, so stay in this state.
            <action name = "subscribe failed" />
        </event>
        <event name = "expired">
            Handle timeout in messaging from server by sending a ping. Will
            try multiple times before giving up.
            <action name = "handle connected timeout" />
            <action name = "send" message = "HUGZ" />
        </event>
    </state>

    <state name = "subscribing" inherit = "defaults">
        Wait for the server to respond to the subscription reuqest.
        <event name = "ICANHAZ OK" next = "subscribed">
            Subscription was successful, tell our user and move to the
            subscribed state. A send credit will be triggered from this
            action.
            <action name = "stayin alive" />
            <action name = "signal subscribe success" />
        </event>
        <event name = "expired">
            <action name = "handle subscribe timeout" />
        </event>
    </state>

    <state name = "subscribed" inherit = "defaults">
        In this state, we have our inbox and at least one subscription.
        <event name = "send credit">
            Send the credit.
            <action name = "send" message = "NOM" />
        </event>
        <event name = "CHEEZBURGER">
            Receive a portion of a file and make sure that the client has credit
            with the server.
            <action name = "stayin alive" />
            <action name = "process the patch" />
            <action name = "refill credit as needed" />
        </event>
        <event name = "finished">
            Finished receiving current changes. Make sure client has credit.
            <action name = "refill credit as needed" />
        </event>
        <event name = "destructor">
            This event corresponds with the API destructor. This will tell the
            server we're leaving and then terminate.
            <action name = "send" message = "KTHXBAI" />
            <action name = "signal success">
                Success or failure is required for the destructor api.
            </action>
            <action name = "terminate" />
        </event>
        <event name = "expired">
            Handle timeout in messaging from server by sending a ping. Will
            try multiple times before giving up.
            <action name = "handle connected timeout" />
            <action name = "send" message = "HUGZ" />
        </event>
    </state>

    <state name = "defaults">
        <event name = "SRSLY">
            <action name = "stayin alive" />
            <action name = "log access denied" />
            <action name = "terminate" />
        </event>
        <event name = "RTFM">
            <action name = "stayin alive" />
            <action name = "log invalid message" />
            <action name = "terminate" />
        </event>
        <event name = "HUGZ OK">
            Just keeping the connection alive.
            <action name = "stayin alive" />
        </event>
        <event name = "*">
            <action name = "log protocol error" />
        </event>
        <event name = "bombcmd">
            This event is used when a connection timeout occurs on a
            synchronous API call.
            <action name = "sync server not present" />
            <action name = "terminate" />
        </event>
        <event name = "bombmsg">
            This event is used when a communication timeout occurs and the
            client is not in the middle of handling an API call.
            <action name = "async server not present" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- API methods -->

    <method name = "constructor" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful.
        <field name = "endpoint" type = "string" />
        <field name = "timeout" type = "number" size = "4" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "destructor" return = "status">
    Disconnect from server.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "subscribe" return = "status">
    Subscribe to a directory on the server, directory specified by path.
        <field name = "path" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "set inbox" return = "status">
    Tell the api where to store files. This should be done before
    subscribing to anything.
        <field name = "path" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SUCCESS">
        <field name = "status" type = "number" size = "1" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "number" size = "1" />
        <field name = "reason" type = "string" />
    </reply>
</class>
