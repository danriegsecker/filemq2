<class
    name = "fmq_server"
    title = "FILEMQ Server"
    script = "zproto_server_c"
    protocol_class = "fmq_msg"
    package_dir = "../include"
    source_dir = "."
    >

    FileMQ protocol server

    <!-- As specified by zproject our license is in the main dir. -->
    <include filename = "../license.xml" />

    <!-- State machine for a client connection -->
    
    Names of states, events, and actions are case insensitive.
    By convention however we use uppercase for protocol events.

    <state name = "start" inherit = "defaults">
        The server will remain in this state when a client connects
        waiting for the client to initiate a conversation.
        <event name = "OHAI" next = "ready">
            The server receives the initiation of the converstation
            and responds if everything is OK.
            <action name = "send" message = "OHAI OK" />
        </event>
    </state>

    <state name = "ready" inherit = "defaults">
        The server now has a connected client we at this point need
        at least one subscrition and NOM credit before any files
        get dispatched.
        <event name = "ICANHAZ">
            The server receives a subscription request from the
            connected client and therefore stores that subscription
            and responds if things are OK. This event does not move
            the server to a new state.
            <action name = "store client subscription" />
            <action name = "send" message = "ICANHAZ OK" />
        </event>
        <event name = "NOM" next = "dispatching">
            The server receives a credit from the client and can now
            move on to the dispatching state and send data.
            <action name = "store client credit" />
            <action name = "get next patch for client" />
        </event>
        <event name = "dispatch" next = "dispatching">
            Internal event for when a subscribed directory has a change
            detected.
            <action name = "get next patch for client" />
        </event>
        <!-- HUGZ (essentially a ping) is always valid -->
        <event name = "HUGZ">
            <action name = "send" message = "HUGZ OK" />
        </event>
        <!-- The client can terminate the connection at any time -->
        <event name = "KTHXBAI">
            <action name = "terminate" />
        </event>
        <!-- Client can restart connection at any time -->
        <event name = "OHAI">
            <action name = "send" message = "OHAI-OK" />
        </event>
    </state>

    <state name = "dispatching" inherit = "defaults">
        The server now has client connection that has submitted a subscription
        request and has given credit. The server can send data.
        <event name = "send chunk">
            <action name = "send" message = "CHEEZBURGER" />
            <action name = "get next patch for client" />
        </event>
        <event name = "send delete">
            <action name = "send" message = "CHEEZBURGER" />
            <action name = "get next patch for client" />
        </event>
        <event name = "next patch">
            <action name = "get next patch for client" />
        </event>
        <event name = "no credit" next = "ready" />
        <event name = "finished" next = "ready" />
        <event name = "NOM">
            The server receives a credit from the client and can now
            move on to the dispatching state and send data.
            <action name = "store client credit" />
            <action name = "get next patch for client" />
        </event>
        <!-- HUGZ (essentially a ping) is always valid -->
        <event name = "HUGZ">
            <action name = "send" message = "HUGZ-OK" />
        </event>
        <!-- The client can terminate the connection at any time -->
        <event name = "KTHXBAI">
            <action name = "terminate" />
        </event>
        <!-- Client can restart connection at any time -->
        <event name = "OHAI" next = "ready">
            <action name = "send" message = "OHAI-OK" />
        </event>
    </state>

    <state name = "defaults">
        <!-- All other protocol messages are invalide -->
        <event name = "*">
            <action name = "send" message = "RTFM" />
            <action name = "terminate" />
        </event>
        <!-- This built-in event hits on a connection timeout -->
        <event name = "expired">
            <action name = "terminate" />
        </event>
    </state>

</class>
